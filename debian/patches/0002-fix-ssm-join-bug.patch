From: Alexander Gall <gall@lopevi.switch.ch>
Date: Tue, 22 Jul 2014 12:01:00 +0200
Subject: fix-ssm-join-bug

When the explicit leave message from a stopping/dying remote beacon is
not received and the beacon is restarted within the timeout interval
of the local beacon, the local beacon leaves (S, G) and never re-joins
it.

The fix works by collecting all beacons with the same source address
(but differing source ports) in a set.  The (S, G) channel is joined
when the first entry is created and left when the set becomes empty.
---
 dbeacon.cpp |  102 ++++++++++++++++++++++++++++++++++++-----------------------
 1 file changed, 63 insertions(+), 39 deletions(-)

diff --git a/dbeacon.cpp b/dbeacon.cpp
index f758298..4f46e84 100644
--- a/dbeacon.cpp
+++ b/dbeacon.cpp
@@ -1122,55 +1122,79 @@ void Stats::check_validity(uint64_t now) {
 		valid = false;
 }
 
-typedef std::pair<address, address> SGPair;
-struct SGInfo {
-	int count;
-#define SGINFO_F_JOIN_FAILED	0x0001
-	uint32_t flags;
-};
-typedef std::map<SGPair, SGInfo> SGCountMap;
-static SGCountMap countMap;
+typedef std::set<address> SourceSet;
+typedef std::map<address, SourceSet> SourceMap;
+typedef std::map<address, SourceMap> GroupMap;
+static GroupMap groupMap;
 
 static void CountSSMJoin(const address &group, const address &source) {
-	SGCountMap::iterator j = countMap.find(SGPair(group, source));
-
-	if (j == countMap.end()) {
-		j = countMap.insert(std::make_pair(SGPair(group, source), SGInfo())).first;
-		j->second.count = 1;
-		j->second.flags = SGINFO_F_JOIN_FAILED;
-	} else
-		j->second.count++;
-
-	if (j->second.flags & SGINFO_F_JOIN_FAILED) {
-		char tmp[64];
-
-		if (SSMJoin(ssmMcastSock, group, source) < 0) {
+	address source_addr;
+	char tmp[64], tmp2[64], tmp3[64];
+	
+	source_addr.set_family(source.family());
+	source_addr.copy_address(source);
+	source_addr.set_port(0);
+	GroupMap::iterator g = groupMap.find(group);
+	if (g == groupMap.end()) {
+		if (verbose) 
+			info("Registering SSM group %s", group.to_string(tmp, sizeof(tmp)));
+		g = groupMap.insert(std::make_pair(group, SourceMap())).first;
+	}
+	SourceMap::iterator s = g->second.find(source_addr);
+	if (s == g->second.end()) {
+		if (verbose)
+			info("Joining (%s, %s)", source_addr.to_string(tmp, sizeof(tmp)),
+			     group.to_string(tmp2, sizeof(tmp2)));
+		if (SSMJoin(ssmMcastSock, group, source_addr) < 0) {
 			if (verbose)
-				info("Failed to join SSM (S,G) where S = %s, reason: %s",
-					source.to_string(tmp, sizeof(tmp)), strerror(errno));
+				info("Join failed, reason: %s", strerror(errno));
+			return;
 		} else {
-			if (verbose > 1)
-				info("Joined SSM (S, G) where S = %s", source.to_string(tmp, sizeof(tmp)));
-
-			j->second.flags &= ~SGINFO_F_JOIN_FAILED;
+			s = g->second.insert(std::make_pair(source_addr, SourceSet())).first;
 		}
+	} 
+	SourceSet::iterator ss = s->second.find(source);
+	if (ss == s->second.end()) {
+		if (verbose)
+			info("Adding beacon %s to (%s, %s)", source.to_string(tmp, sizeof(tmp)),
+			     source_addr.to_string(tmp2, sizeof(tmp2)),
+			     group.to_string(tmp3, sizeof(tmp3)));
+		s->second.insert(source);
 	}
 }
 
 static void CountSSMLeave(const address &group, const address &source) {
-	SGCountMap::iterator j = countMap.find(SGPair(group, source));
-
-	/* This should actually be assert(j != countMap.end()); */
-	if (j == countMap.end())
+	address source_addr;
+	char tmp[64], tmp2[64];
+
+	GroupMap::iterator g = groupMap.find(group);
+	assert(g != groupMap.end());
+	source_addr.set_family(source.family());
+	source_addr.copy_address(source);
+	source_addr.set_port(0);
+	SourceMap::iterator s = g->second.find(source_addr);
+	assert(s != g->second.end());
+	SourceSet::iterator ss = s->second.find(source);
+	if (ss == s->second.end()) {
 		return;
-
-	j->second.count--;
-
-	if (j->second.count == 0) {
-		if (!(j->second.flags & SGINFO_F_JOIN_FAILED))
-			SSMLeave(ssmMcastSock,group, source);
-
-		countMap.erase(j);
+	}
+	if (verbose)
+		info("Removing beacon %s from (%s, %s)", source.to_string(tmp, sizeof(tmp)),
+		     source_addr.to_string(tmp2, sizeof(tmp2)),
+		     group.to_string(tmp2, sizeof(tmp2)));
+	s->second.erase(ss);
+	if (s->second.empty()) {
+		if (verbose)
+			info("No more beacons for (%s, %s), leaving group",
+			     source_addr.to_string(tmp, sizeof(tmp)),
+			     group.to_string(tmp2, sizeof(tmp2)));
+		SSMLeave(ssmMcastSock,group, source_addr);
+		g->second.erase(s);
+	}
+	if (g->second.empty()) {
+		if (verbose)
+			info("No more sources, unregistering group %s, ", group.to_string(tmp, sizeof(tmp)));
+		groupMap.erase(g);
 	}
 }
 
